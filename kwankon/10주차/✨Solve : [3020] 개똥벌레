import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

public class Main {
    static BufferedReader bf;
    static int a, b, m = 1000000000, count;
    static ArrayList<Integer> floor = new ArrayList<>();
    static ArrayList<Integer> ceiling = new ArrayList<>();
    static int[] dp;
    static int[] dp1;


    public static void main(String[] args) throws IOException {
        bf = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(bf.readLine());
        a = Integer.parseInt(st.nextToken());
        b = Integer.parseInt(st.nextToken());
        dp = new int[b+1];
        dp1 = new int[b+1];
        input();
        solution();
        System.out.println(m + " " + count);
    }

    public static void input() throws IOException {
        for(int i = 0; i < a; i++){
            if(i % 2  == 0) floor.add(Integer.parseInt(bf.readLine()));
            else ceiling.add(Integer.parseInt(bf.readLine()));
        }
    }

    public static void solution() {
        Collections.sort(floor);
        Collections.sort(ceiling);
        for(int i = 0; i < floor.size(); i++)
            if(dp[floor.get(i)] == 0) dp[floor.get(i)] = (floor.size() - i);
        for(int i = floor.get(floor.size() - 1) - 1; i > 0 ; i--)
            if (dp[i] == 0) dp[i] = dp[i + 1];
        for(int i = 0; i < ceiling.size(); i++)
            if(dp1[ceiling.get(i)] == 0) dp1[ceiling.get(i)] = (ceiling.size() - i);
        for(int i = ceiling.get(ceiling.size() - 1) - 1; i > 0 ; i--)
            if (dp1[i] == 0) dp1[i] = dp1[i + 1];
        for(int i = 1; i <= b; i++) {
            if(m > dp[i] + dp1[b-i+1]){
                count = 1;
                m = dp[i] + dp1[b-i+1];
            }
            else if(m == dp[i] + dp1[b-i+1]) count++;
        }
    }

}
